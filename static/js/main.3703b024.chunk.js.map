{"version":3,"sources":["functions.js","Parser.js","LocusTable.js","cellTypes/dnaType.js","App.js","registerServiceWorker.js","index.js","cells.js"],"names":["times","require","iupacAmbiguity","a","c","g","t","r","y","s","w","k","m","b","d","h","v","n","iupacAmbiguityLookup","ag","ct","cg","at","gt","ac","cgt","agt","act","acg","acgt","iupacRegex","pattern","toLowerCase","split","reduce","RegExp","count","sequence","subsequence","re","match","length","bases","randomBase","Math","floor","random","consensusBase","sequences","index","set","Set","forEach","add","charAt","Array","from","sort","join","allSame","module","exports","amplicon","start","end","indexOf","substring","find","search","randomSequence","consensus","i","min","result","firstDifference","looksLikeDna","replace","meltingTemperature","gcContent","hot","flatten","complement","reverse","parser","Parser","setHot","on","cellCoord","callback","x","row","column","data","getData","parse","toUpperCase","startCellCoord","endCellCoord","done","range","r0","r1","c0","c1","fragment","col","push","parsed","name","params","round","LocusTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contextMenu","key","selection","clickEvent","console","log","items","toggle_stripes","_this2","getSelected","_range","slicedToArray","c2","r2","L","R","max","T","B","setCellMeta","getCellMeta","drawStripes","render","set_reference","ranges","fn","getCell","visit","arguments","settings","type","colHeaders","rowHeaders","width","height","stretchH","formulas","manualColumnResize","react_default","createElement","id","react_handsontable","React","Component","checkType","baseMap","baseMapLight","base","map","toSpan","concat","toStripe","editor","Handsontable","editors","TextEditor","dnaType","renderer","td","prop","unparsedValue","cellProperties","div","value","startsWith","parsedResult","error","getValue","chars","toString","stripes","document","innerHTML","toStripes","spans","toColorText","style","fontFamily","renderers","TextRenderer","apply","undefined","childNodes","removeChild","appendChild","NumericRenderer","validator","validators","TextValidator","fillDetails","copyDetails","cellTypes","registerCellType","registerValidator","hooks","entireArea","startArea","coords","changes","source","_fillDetails","translateChanges","_copyDetails$coords","startRow","startCol","endRow","endCol","last","App","handleChange","setting","states","event","setState","defineProperty","target","checked","displayText","className","float","href","rel","src","alt","src_LocusTable","ref","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","charA","charCodeAt","isFormula","cell","getFormula","translateCell","destination","formula","getReferences","translateReference","references","toRowIndex","toRow","toColumnIndex","prefix","toColumn","String","fromCharCode","toReference","coordinates","absoluteRow","absoluteCol","toCoordinates","reference","bare","firstDigit","dRow","dCol","sourceIndex","startRange","entireRange","startWidth","sourceCellForFill","startHeight","change","translated"],"mappings":"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","file":"static/js/main.3703b024.chunk.js","sourcesContent":["const { times } = require('ramda')\n\nconst amplicon = (sequence, start, end) => {\n  const a = sequence.indexOf(start)\n  if (a < 0) return ''\n  const b = sequence.indexOf(end, a)\n  if (b < 0) return ''\n  return sequence.substring(a, b + end.length)\n}\n\n// https://droog.gs.washington.edu/parc/images/iupac.html\nconst iupacAmbiguity = {\n  a: 'a',\n  c: 'c',\n  g: 'g',\n  t: 't',\n  r: '[ag]',\n  y: '[ct]',\n  s: '[cg]',\n  w: '[at]',\n  k: '[gt]',\n  m: '[ac]',\n  b: '[cgt]',\n  d: '[agt]',\n  h: '[act]',\n  v: '[acg]',\n  n: '[acgt]',\n}\nconst iupacAmbiguityLookup = {\n  a: 'a',\n  c: 'c',\n  g: 'g',\n  t: 't',\n  ag: 'r',\n  ct: 'y',\n  cg: 's',\n  at: 'w',\n  gt: 'k',\n  ac: 'm',\n  cgt: 'b',\n  agt: 'd',\n  act: 'h',\n  acg: 'v',\n  acgt: 'n',\n}\n\nconst looksLikeDna = s => {\n  if (typeof s === 'number') return false\n  return s.replace(/[acgtryswkmbdhvn]/gi, '') === ''\n}\n\nconst iupacRegex = s => {\n  const pattern = s\n  .toLowerCase()\n  .split('')\n  .reduce((a, c) => a += iupacAmbiguity[c], '')\n  return new RegExp(pattern, \"gi\")\n}\n\nconst find = (sequence, subsequence) => {\n  const re = iupacRegex(subsequence)\n  return sequence.search(re)\n}\n\nconst count = (sequence, subsequence) => {\n  const re = iupacRegex(subsequence)\n  return ((sequence || '').match(re) || []).length\n}\n\nconst bases = 'acgt'.split('')\nconst randomBase = () => bases[Math.floor(4 * Math.random())]\nconst randomSequence = n => times(randomBase, n).join('')\n\nconst consensusBase = (sequences, index) => {\n  const set = new Set()\n  sequences.forEach(s => set.add(s.charAt(index)))\n  const v = Array.from(set)\n  v.sort()\n  return iupacAmbiguityLookup[v.join('')]\n}\n\nconst consensus = sequences => {\n  let n = sequences[0].length\n  for (let i = 1; i < sequences.length; i++)\n    n = Math.min(n, sequences[i].length)\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += consensusBase(sequences, i)\n  }\n  return result\n}\n\nconst allSame = (sequences, index) => {\n  switch(consensusBase(sequences, index)) {\n    case 'a':\n    case 'c':\n    case 'g':\n    case 't':\n      return true\n    default:\n      return false\n  }\n}\n\nconst firstDifference = sequences => {\n  let n = sequences[0].length\n  for (let i = 0; i < n; i++) {\n    if (!allSame(sequences, i)) return i\n  }\n  return -1\n}\n\nconst meltingTemperature = sequence => {\n  if (sequence.length <= 13) {\n    const at = count(sequence, 'w')\n    const cg = count(sequence, 's')\n    return 2 * at + 4 * cg\n  }\n  const cg = count(sequence, 's')\n  return 64.9 + 41 * (cg - 16.4) / sequence.length\n}\n\nconst gcContent = sequence => 100 * count(sequence, 's') / sequence.length\n\nmodule.exports = {\n  amplicon,\n  find,\n  count,\n  randomSequence,\n  consensus,\n  firstDifference,\n  looksLikeDna,\n  meltingTemperature,\n  gcContent\n}\n","const { flatten } = require('ramda')\nconst { complement, reverse } = require('bionode-seq')\nconst {\n  amplicon,\n  find,\n  count,\n  randomSequence,\n  consensus,\n  firstDifference,\n  meltingTemperature,\n  gcContent } = require('./functions')\nconst { Parser } = require('hot-formula-parser')\nconst parser = new Parser()\n\nlet hot\n\nparser.setHot = h => {hot = h}\n\nparser.on('callCellValue', (cellCoord, callback) => {\n  const x = cellCoord.row.index\n  const y = cellCoord.column.index\n  const data = hot.getData()[x][y]\n\n  if (data[0] !== '=')\n    callback(data)\n  else {\n    const parsed = parser.parse(data.substring(1).toUpperCase())\n    callback(parsed.result)\n  }\n})\n\nparser.on('callRangeValue', function(startCellCoord, endCellCoord, done) {\n  const range = []\n  const r0 = startCellCoord.row.index\n  const r1 = endCellCoord.row.index\n  const c0 = startCellCoord.column.index\n  const c1 = endCellCoord.column.index\n\n  for (var row = r0; row <= r1; row++) {\n    const fragment = [];\n\n    for (var col = c0; col <= c1; col++) {\n      const data = hot.getData()[row][col]\n      if (data[0] !== '=')\n        fragment.push(data)\n      else {\n        const parsed = parser.parse(data.substring(1).toUpperCase())\n        fragment.push(parsed.result)\n      }\n    }\n    range.push(fragment);\n  }\n\n  if (range) {\n    done(range)\n  }\n})\n\nparser.on('callFunction', (name, params, done) => {\n  switch (name.toUpperCase()) {\n    case 'REVERSE_COMPLEMENT':\n      done(complement(params[0], true))\n      break\n    case 'REVERSE':\n      done(reverse(params[0]))\n      break\n    case 'COMPLEMENT':\n      done(complement(params[0], false))\n      break\n    case 'AMPLICON':\n      done(amplicon(params[0], params[1], params[2]))\n      break\n    case 'FIND':\n      done(find(params[0], params[1]))\n      break\n    case 'COUNT':\n      done(count(params[0], params[1]))\n      break\n    case 'RANDOM_SEQUENCE':\n      done(randomSequence(params[0]))\n      break\n    case 'BASE':\n      done(params[0].substring(params[1], params[1] + 1))\n      break\n    case 'LENGTH':\n      done(params[0].length)\n      break\n    case 'CONSENSUS':\n      done(consensus(flatten(params[0])))\n      break\n    case 'FIRST_DIFFERENCE':\n      done(firstDifference(flatten(params[0])))\n      break\n    case 'MELTING_TEMPERATURE':\n      done(Math.round(10 * meltingTemperature(params[0])) / 10)\n      break\n    case 'GC_CONTENT':\n      done(Math.round(gcContent(params[0])))\n      break\n    default:\n      break\n  }\n})\n\nmodule.exports = {\n  parser\n}\n","import React from 'react';\nimport { HotTable } from '@handsontable/react';\nconst { forEach, times } = require('ramda')\n\nconst visit = (hot, ranges, fn) => {\n  forEach( range => {\n    const {start, end} = range\n    for (var row = start.row; row <= end.row; row++) {\n      for (var col = start.col; col <= end.col; col++) {\n        console.log(row, col)\n        fn(hot.getCell(row, col))\n      }\n    }\n  }, ranges)\n}\n\nclass LocusTable extends React.Component {\n  constructor(props) {\n    super(props);\n    const { data } = props\n    this.state = { data }\n  }\n\n  render() {\n    const contextMenu = {\n      callback: function (key, selection, clickEvent) {\n        // Common callback for all options\n        console.log(clickEvent);\n      },\n      items: {\n        \"toggle_stripes\": {\n          name: 'Toggle Stripes',\n          callback: function () {\n            this.getSelected().forEach(range => {\n              const [c1, r1, c2, r2] = range\n              const L = Math.min(c1, c2)\n              const R = Math.max(c1, c2)\n              const T = Math.min(r1, r2)\n              const B = Math.max(r1, r2)\n              for (let col = L; col <= R; col++) {\n                for (let row = T; row <= B; row++) {\n                  this.setCellMeta(col, row, 'drawStripes', !this.getCellMeta(col, row).drawStripes)\n                }\n              }\n            })\n            this.render()\n          }\n        },\n        \"set_reference\": {\n          name: 'Set Reference',\n          callback: function () {\n            const ranges = arguments[1]\n            visit(this, ranges, console.log)\n            // console.log('setting cell reference')\n            // console.log(`arguments[1]:`, arguments[1])\n          }\n        },\n        // \"row_above\": {\n        //   disabled: function () {\n        //     // Disable option when first row was clicked\n        //     return this.getSelectedLast()[0] === 0; // `this` === hot3\n        //   }\n        // },\n        // \"row_below\": {\n        //   name: 'Click to add row below' // Set custom text for predefined option\n        // },\n        // \"about\": { // Own custom option\n        //   name: 'Custom option',\n        //   callback: function() { // Callback for specific option\n        //     setTimeout(function() {\n        //       alert('Hello world!'); // Fire alert after menu close (with timeout)\n        //     }, 0);\n        //   }\n        // }\n      }\n    }\n    const settings = {\n      data: this.state.data,\n      type: \"locus-acgt-dna-sequence\",\n      colHeaders: true,\n      rowHeaders: true,\n      width: \"1200\",\n      height: \"700\",\n      stretchH: \"all\",\n      formulas: true,\n      manualColumnResize: true,\n      contextMenu\n    }\n\n    return (\n      <div id=\"hot-app\">\n        <HotTable\n          settings={settings}\n        />\n      </div>\n    );\n  }\n}\nexport default LocusTable\n","import Handsontable from 'handsontable'\n\nconst { checkType } = require('bionode-seq')\nconst { parser } = require('../Parser')\nconst { looksLikeDna } = require('../functions')\n\n// eslint-disable-next-line\nconst validator = function(value, callback) {\n  // TODO: Maybe apply parser here?\n  if (value == null) {\n    value = '';\n  }\n  if (this.allowEmpty && value === '') {\n    callback(true);\n\n  } else if (value === '') {\n    callback(false);\n\n  } else {\n    const type = checkType(value)\n    callback(type === 'dna' || value.replace(/t*/g, '') === '');\n  }\n};\n\nconst baseMap = {\n  a: 'adenine',\n  c: 'cytosine',\n  g: 'guanine',\n  t: 'thymine'\n}\n\nconst baseMapLight = {\n  a: 'adenine-light',\n  c: 'cytosine-light',\n  g: 'guanine-light',\n  t: 'thymine-light'\n}\n\n// const REFERENCE = 'acactatacgtaggactgaggcatgacgcgatcgacgcgatacgagcatcgatcgactacgcggcatcacgaagc'\nconst REFERENCE = ''\n\nconst base = (c, match) => {\n  const map = match ? baseMapLight : baseMap\n  if (c.toLowerCase() in map) return map[c.toLowerCase()]\n  return 'ambiguous'\n}\nconst toSpan = (c, match) => `<span class=\"${base(c, match)}\">${c}</span>`\nconst toStripe = (c, x, match) => `<line class=\"${base(c, match)}\" y1=\"0\" y2=\"20\" x1=\"${x}\" x2=\"${x}\" style=\"stroke-width:1\"/>`\n\n// eslint-disable-next-line\nconst toStripes = sequence => {\n  const chars = sequence.toString().split('')\n  let stripes = ''\n  for (var i = 0; i < chars.length; i++) {\n    const match = chars[i] === REFERENCE[i]\n    stripes += toStripe(chars[i], i, match)\n  }\n  const div = document.createElement('div');\n  div.innerHTML = `<svg height=20 width = ${sequence.length}>${stripes}</svg>`\n  return div\n}\n\nconst toColorText = function(sequence) {\n  const chars = sequence.toString().split('')\n  let spans = ''\n  for (var i = 0; i < chars.length; i++) {\n    const match = chars[i] === REFERENCE[i]\n    spans += toSpan(chars[i], match)\n  }\n  const div = document.createElement('div');\n  div.innerHTML = spans;\n  return div\n}\n\nconst getValue = (hot, unparsedValue) => {\n  if (!unparsedValue.startsWith('='))\n    return unparsedValue\n  parser.setHot(hot)\n  const parsedResult = parser.parse(unparsedValue.substring(1))\n  return (parsedResult.error) ? parsedResult.error : parsedResult.result\n}\n\nconst renderer = function(hot, td, row, col, prop, unparsedValue, cellProperties) {\n  const value = getValue(hot, unparsedValue)\n  if (typeof value === 'number') {\n    Handsontable.renderers.NumericRenderer(hot, td, row, col, prop, value, cellProperties)\n    return\n  }\n  if (typeof value === 'boolean') {\n    Handsontable.renderers.TextRenderer(hot, td, row, col, prop, value, cellProperties)\n    return\n  }\n  if (!looksLikeDna(value)) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    return\n  }\n\n  const drawStripes = hot.getCellMeta(row, col).drawStripes\n\n  let div\n  if (drawStripes) {\n    div = toStripes(value)\n  } else {\n    div = toColorText(value)\n    td.style.fontFamily = 'monospace';\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n  }\n  if (td.childNodes[0] !== undefined)\n    td.removeChild(td.childNodes[0]);\n  td.appendChild(div)\n}\n\nconst editor = Handsontable.editors.TextEditor\n\nexport default {\n  renderer, //: Handsontable.renderers.TextRenderer,\n  validator: Handsontable.validators.TextValidator,\n  editor\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'handsontable/dist/handsontable.full.css';\nimport { translateChanges } from './cells'\nimport LocusTable from './LocusTable'\nimport dnaType from './cellTypes/dnaType'\nimport Handsontable from 'handsontable'\n\nlet fillDetails = {}\nlet copyDetails = {}\nHandsontable.cellTypes.registerCellType('locus-acgt-dna-sequence', dnaType)\nHandsontable.validators.registerValidator('locus-acgt-dna-sequence', dnaType.validator)\n\nHandsontable.hooks.add('modifyAutofillRange', (entireArea, startArea) => {\n  fillDetails = { startArea, entireArea }\n})\n\nHandsontable.hooks.add('afterCopy', (data, coords) => {\n  // TODO: handle multiple area selection; that's why coords is an array\n  copyDetails = { coords: coords[0] }\n})\n\nHandsontable.hooks.add('beforeChange', (changes, source) => {\n  if (source === 'Autofill.fill') {\n    const { startArea, entireArea } = fillDetails\n    translateChanges(startArea, entireArea, changes)\n  }\n  if (source === 'CopyPaste.paste') {\n    if (!copyDetails.coords) return // if not copying from within this sheet\n    const { startRow, startCol, endRow, endCol } = copyDetails.coords\n    const startArea = [ startRow, startCol, endRow, endCol ]\n    const last = changes.length - 1\n    const T = changes[0][0]\n    const L = changes[0][1]\n    const B = changes[last][0]\n    const R = changes[last][1]\n    const entireArea = [ T, L, B, R ]\n    translateChanges(startArea, entireArea, changes)\n  }\n})\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [\n        ['tccagggacattcatgcatcgcctt', '', '', '', '', '', '', '', '', ''],\n        ['tccaggtacattcatgcattgcctt', '', '', '', '', '', '', '', '', ''],\n        ['cat', '', '', '', '', '', '', '', '', ''],\n        ['gcc', '', '', '', '', '', '', '', '', ''],\n        ['=AMPLICON(A1, A3, A4)', 'AMPLICON(A1, A3, A4)', '', '', '', '', '', '', '', ''],\n        ['=BASE(A1, 1)', 'BASE(A1, 1)', '', '', '', '', '', '', '', ''],\n        ['=COMPLEMENT(A1)', 'COMPLEMENT(A1)', '', '', '', '', '', '', '', ''],\n        ['=CONSENSUS(A1:A2)', 'CONSENSUS(A1:A2)', '', '', '', '', '', '', '', ''],\n        ['=COUNT(A1, A3)', 'COUNT(A1, A3)', '', '', '', '', '', '', '', ''],\n        ['=FIND(A1, A3)', 'FIND(A1, A3)', '', '', '', '', '', '', '', ''],\n        ['=FIRST_DIFFERENCE(A1:A2)', 'FIRST_DIFFERENCE(A1:A2)', '', '', '', '', '', '', '', ''],\n        ['=GC_CONTENT(A1)', 'GC_CONTENT(A1)', '', '', '', '', '', '', '', ''],\n        ['=LENGTH(A1)', 'LENGTH(A1)', '', '', '', '', '', '', '', ''],\n        ['=MELTING_TEMPERATURE(A1)', 'MELTING_TEMPERATURE(A1)', '', '', '', '', '', '', '', ''],\n        ['=RANDOM_SEQUENCE(30)', 'RANDOM_SEQUENCE(30)', '', '', '', '', '', '', '', ''],\n        ['=REVERSE_COMPLEMENT(A1)', 'REVERSE_COMPLEMENT(A1)', '', '', '', '', '', '', '', ''],\n        ['=REVERSE(A1)', 'REVERSE(A1)', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n      ],\n      // data: times( () => times (() => randomSequence(25), 4), 6),\n      settings: {\n        displayText: false,\n        width: 1200,\n        height: 220,\n      },\n    }\n  }\n\n  handleChange = (setting, states) => {\n    return event => {\n      this.setState({\n        settings: {\n          [setting]: states[event.target.checked ? 1 : 0],\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <span className=\"App-title\">Locus&nbsp;</span>\n            <span className=\"App-title adenine\">A</span>\n            <span className=\"App-title\">&ndash;</span>\n            <span className=\"App-title cytosine\">C</span>\n            <span className=\"App-title\">&ndash;</span>\n            <span className=\"App-title guanine\">G</span>\n            <span className=\"App-title\">&ndash;</span>\n            <span className=\"App-title thymine\">T&nbsp;</span>\n            <span className=\"App-subtitle\">a spreadsheet for sequences</span>\n            <span className=\"App-subtitle\" style={{float:\"right\"}}>\n              <a href=\"https://github.com/carlmanaster/locus-acgt\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <img src=\"GitHub-Mark-Light-32px.png\" alt=\"octocat\"></img>\n              </a>\n            </span>\n        </header>\n        <LocusTable\n          data = {this.state.data}\n          name = \"hot\"\n          id = \"hot-id\"\n          ref = \"hot-ref\"\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","const charA = 'a'.charCodeAt()\n\nconst isFormula = cell => cell.startsWith('=')\nconst getFormula = cell => cell.substring(1)\nconst translateCell = (source, destination, cell) => {\n  if (!isFormula(cell)) return cell\n  let formula = getFormula(cell)\n  const references = getReferences(formula)\n  references.forEach(r => {\n    const r2 = translateReference(source, destination, r)\n    formula = formula.replace(r, r2)\n  })\n  return `=${formula}`\n}\n\nconst getReferences = formula => {\n  const references = formula.match(/\\$?[a-z]{1,2}\\$?\\d+/gi)\n  if (!references) return []\n  return references\n}\n\nconst toRowIndex = n => n - 1\nconst toRow = n => n + 1\nconst toColumnIndex = prefix => {\n  const s = prefix.toLowerCase()\n  if (s.length === 1) return s.charCodeAt(0) - charA\n  return (s.charCodeAt(0) - charA + 1) * 26 + s.charCodeAt(1) - charA\n}\nconst toColumn = n => {\n  let column = String.fromCharCode(n % 26 + charA)\n  if (n > 25) {\n    column += String.fromCharCode(Math.floor(n / 26) + charA - 1)\n  }\n  return column\n}\n\nconst toReference = (coordinates, absoluteRow, absoluteCol) => {\n  let row = toRow(coordinates.row)\n  if (absoluteRow) row = `$${row}`\n  let column = toColumn(coordinates.col)\n  if (absoluteCol) column = `$${column}`\n  return `${column}${row}`\n}\n\nconst toCoordinates = reference => {\n  const bare = reference.replace(/\\$/g, '')\n  const firstDigit = bare.search(/\\d/)\n  const row = toRowIndex(bare.substring(firstDigit))\n  const col = toColumnIndex(bare.substring(0, firstDigit))\n  return {row, col}\n}\n\nconst translateReference = (source, destination, reference) => {\n  const absoluteCol = reference.startsWith('$')\n  const absoluteRow = reference.substring(1).search('\\\\$') > -1\n  const dRow = destination.row - source.row\n  const dCol = destination.col - source.col\n  const coordinates = toCoordinates(reference)\n  if (!absoluteRow) coordinates.row += dRow\n  if (!absoluteCol) coordinates.col += dCol\n  return toReference(coordinates, absoluteRow, absoluteCol)\n}\n\nconst sourceIndex = (index, startRange, entireRange) => {\n  const startWidth = 1 + startRange[1] - startRange[0]\n  if (startRange[0] === entireRange[0]) {\n    return startRange[0] + (index - entireRange[0]) % startWidth\n  } else {\n    return startRange[1] - (entireRange[1] - index) % startWidth\n  }\n}\n\nconst sourceCellForFill = (r, c, startArea, entireArea) => {\n  const [T, L, B, R] = [0, 1, 2, 3]\n  const startHeight = startArea[B] - startArea[T] + 1\n  const entireHeight = entireArea[B] - entireArea[T] + 1\n  const direction = entireHeight > startHeight ? 'vertical' : 'horizontal'\n\n  if (direction === 'vertical') {\n    const col = c\n    const row = sourceIndex(r, [startArea[T], startArea[B]], [entireArea[T], entireArea[B]])\n    return { row, col }\n  } else {\n    const row = r\n    const col = sourceIndex(c, [startArea[L], startArea[R]], [entireArea[L], entireArea[R]])\n    return { row, col }\n  }\n}\n\nconst translateChanges = (startArea, entireArea, changes) => {\n  changes.forEach(change => {\n    const row = change[0]\n    const col = change[1]\n    const cell = change[3]\n    const source = sourceCellForFill(row, col, startArea, entireArea)\n    const translated = translateCell(source, {row, col}, cell)\n    change[3] = translated\n  })\n}\n\nmodule.exports = {\n  isFormula,\n  getFormula,\n  translateCell,\n  getReferences,\n  toRowIndex,\n  toColumnIndex,\n  toReference,\n  toRow,\n  toColumn,\n  toCoordinates,\n  translateReference,\n  sourceCellForFill,\n  sourceIndex,\n  translateChanges\n}\n"],"sourceRoot":""}