{"version":3,"sources":["Parser.js","LocusTable.js","cellTypes/dnaType.js","App.js","registerServiceWorker.js","index.js","functions.js"],"names":["hot","flatten","require","complement","reverse","amplicon","find","count","randomSequence","consensus","firstDifference","parser","Parser","setHot","h","on","cellCoord","callback","x","row","index","y","column","data","getData","parse","substring","toUpperCase","result","startCellCoord","endCellCoord","done","range","r0","r1","c0","c1","fragment","col","push","parsed","name","params","length","module","exports","forEach","LocusTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contextMenu","key","selection","clickEvent","console","log","items","toggle_stripes","setCellMeta","render","set_reference","ranges","fn","start","end","getCell","visit","arguments","settings","type","colHeaders","rowHeaders","width","height","stretchH","formulas","react_default","a","createElement","id","react_handsontable","React","Component","checkType","looksLikeDna","baseMap","c","g","t","baseMapLight","base","match","map","toLowerCase","toSpan","concat","editor","Handsontable","editors","TextEditor","dnaType","renderer","td","prop","unparsedValue","cellProperties","value","startsWith","parsedResult","error","getValue","Number","isInteger","renderers","NumericRenderer","div","sequence","chars","toString","split","spans","i","document","innerHTML","toColorText","style","fontFamily","TextRenderer","apply","removeChild","childNodes","appendChild","validator","validators","TextValidator","times","cellTypes","registerCellType","registerValidator","App","handleChange","setting","states","event","setState","defineProperty","target","checked","displayText","className","src_LocusTable","ref","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","iupacAmbiguity","r","s","w","k","m","b","d","v","n","iupacAmbiguityLookup","ag","ct","cg","at","gt","ac","cgt","agt","act","acg","acgt","iupacRegex","pattern","reduce","RegExp","bases","randomBase","Math","floor","random","consensusBase","sequences","set","Set","add","charAt","Array","from","sort","join","allSame","subsequence","re","search","min","replace"],"mappings":"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","file":"static/js/main.5d65acae.chunk.js","sourcesContent":["const { flatten } = require('ramda')\nconst { complement, reverse } = require('bionode-seq')\nconst {\n  amplicon,\n  find,\n  count,\n  randomSequence,\n  consensus,\n  firstDifference } = require('./functions')\nconst { Parser } = require('hot-formula-parser')\nconst parser = new Parser()\n\nlet hot\n\nparser.setHot = h => {hot = h}\n\nparser.on('callCellValue', (cellCoord, callback) => {\n  const x = cellCoord.row.index\n  const y = cellCoord.column.index\n  const data = hot.getData()[x][y]\n\n  if (data[0] !== '=')\n    callback(data)\n  else {\n    const parsed = parser.parse(data.substring(1).toUpperCase())\n    callback(parsed.result)\n  }\n})\n\nparser.on('callRangeValue', function(startCellCoord, endCellCoord, done) {\n  const range = []\n  const r0 = startCellCoord.row.index\n  const r1 = endCellCoord.row.index\n  const c0 = startCellCoord.column.index\n  const c1 = endCellCoord.column.index\n\n  for (var row = r0; row <= r1; row++) {\n    const fragment = [];\n\n    for (var col = c0; col <= c1; col++) {\n      const data = hot.getData()[row][col]\n      if (data[0] !== '=')\n        fragment.push(data)\n      else {\n        const parsed = parser.parse(data.substring(1).toUpperCase())\n        fragment.push(parsed.result)\n      }\n    }\n    range.push(fragment);\n  }\n\n  if (range) {\n    done(range)\n  }\n})\n\nparser.on('callFunction', (name, params, done) => {\n  switch (name.toUpperCase()) {\n    case 'REVERSE_COMPLEMENT':\n      done(complement(params[0], true))\n      break\n    case 'REVERSE':\n      done(reverse(params[0]))\n      break\n    case 'COMPLEMENT':\n      done(complement(params[0], false))\n      break\n    case 'AMPLICON':\n      done(amplicon(params[0], params[1], params[2]))\n      break\n    case 'FIND':\n      done(find(params[0], params[1]))\n      break\n    case 'COUNT':\n      done(count(params[0], params[1]))\n      break\n    case 'RANDOM_SEQUENCE':\n      done(randomSequence(params[0]))\n      break\n    case 'BASE':\n      done(params[0].substring(params[1], params[1] + 1))\n      break\n    case 'LENGTH':\n      done(params[0].length)\n      break\n    case 'CONSENSUS':\n      done(consensus(flatten(params[0])))\n      break\n    case 'FIRST_DIFFERENCE':\n      done(firstDifference(flatten(params[0])))\n      break\n    default:\n      break\n  }\n})\n\nmodule.exports = {\n  parser\n}\n","import React from 'react';\nimport { HotTable } from '@handsontable/react';\nconst { forEach } = require('ramda')\n\nconst visit = (hot, ranges, fn) => {\n  forEach( range => {\n    const {start, end} = range\n    for (var row = start.row; row <= end.row; row++) {\n      for (var col = start.col; col <= end.col; col++) {\n        console.log(row, col)\n        fn(hot.getCell(row, col))\n      }\n    }\n  }, ranges)\n}\n\nclass LocusTable extends React.Component {\n  constructor(props) {\n    super(props);\n    const { data } = props\n    this.state = { data }\n  }\n\n  render() {\n    const contextMenu = {\n      callback: function (key, selection, clickEvent) {\n        // Common callback for all options\n        console.log(clickEvent);\n      },\n      items: {\n        \"toggle_stripes\": {\n          name: 'Toggle Stripes',\n          callback: function () {\n            this.setCellMeta(0, 0, 'drawStripes', true)\n            this.render()\n          }\n        },\n        \"set_reference\": {\n          name: 'Set Reference',\n          callback: function () {\n            const ranges = arguments[1]\n            visit(this, ranges, console.log)\n            // console.log('setting cell reference')\n            // console.log(`arguments[1]:`, arguments[1])\n          }\n        },\n        // \"row_above\": {\n        //   disabled: function () {\n        //     // Disable option when first row was clicked\n        //     return this.getSelectedLast()[0] === 0; // `this` === hot3\n        //   }\n        // },\n        // \"row_below\": {\n        //   name: 'Click to add row below' // Set custom text for predefined option\n        // },\n        // \"about\": { // Own custom option\n        //   name: 'Custom option',\n        //   callback: function() { // Callback for specific option\n        //     setTimeout(function() {\n        //       alert('Hello world!'); // Fire alert after menu close (with timeout)\n        //     }, 0);\n        //   }\n        // }\n      }\n    }\n    const settings = {\n      data: this.state.data,\n      type: \"locus-acgt-dna-sequence\",\n      colHeaders: true,\n      rowHeaders: true,\n      width: \"1200\",\n      height: \"700\",\n      stretchH: \"all\",\n      formulas: true,\n      contextMenu\n    }\n\n    return (\n      <div id=\"hot-app\">\n        <HotTable\n          settings={settings}\n        />\n      </div>\n    );\n  }\n}\nexport default LocusTable\n","import Handsontable from 'handsontable'\n\nconst { checkType } = require('bionode-seq')\nconst { parser } = require('../Parser')\nconst { looksLikeDna } = require('../functions')\n\n// eslint-disable-next-line\nconst validator = function(value, callback) {\n  // TODO: Maybe apply parser here?\n  if (value == null) {\n    value = '';\n  }\n  if (this.allowEmpty && value === '') {\n    callback(true);\n\n  } else if (value === '') {\n    callback(false);\n\n  } else {\n    const type = checkType(value)\n    callback(type === 'dna' || value.replace(/t*/g, '') === '');\n  }\n};\n\nconst baseMap = {\n  a: 'adenine',\n  c: 'cytosine',\n  g: 'guanine',\n  t: 'thymine'\n}\n\nconst baseMapLight = {\n  a: 'adenine-light',\n  c: 'cytosine-light',\n  g: 'guanine-light',\n  t: 'thymine-light'\n}\n\n// const REFERENCE = 'acactatacgtaggactgaggcatgacgcgatcgacgcgatacgagcatcgatcgactacgcggcatcacgaagc'\nconst REFERENCE = ''\n\nconst base = (c, match) => {\n  const map = match ? baseMapLight : baseMap\n  if (c.toLowerCase() in map) return map[c.toLowerCase()]\n  return 'ambiguous'\n}\nconst toSpan = (c, match) => `<span class=\"${base(c, match)}\">${c}</span>`\nconst toStripe = (c, x, match) => `<line class=\"${base(c, match)}\" y1=\"0\" y2=\"20\" x1=\"${x}\" x2=\"${x}\" style=\"stroke-width:1\"/>`\n\n// eslint-disable-next-line\nconst toStripes = sequence => {\n  const chars = sequence.toString().split('')\n  let stripes = ''\n  for (var i = 0; i < chars.length; i++) {\n    const match = chars[i] === REFERENCE[i]\n    stripes += toStripe(chars[i], i, match)\n  }\n  const div = document.createElement('div');\n  div.innerHTML = `<svg height=20 width = ${sequence.length}>${stripes}</svg>`\n  return div\n}\n\nconst toColorText = function(sequence) {\n  const chars = sequence.toString().split('')\n  let spans = ''\n  for (var i = 0; i < chars.length; i++) {\n    const match = chars[i] === REFERENCE[i]\n    spans += toSpan(chars[i], match)\n  }\n  const div = document.createElement('div');\n  div.innerHTML = spans;\n  return div\n}\n\nconst getValue = (hot, unparsedValue) => {\n  if (!unparsedValue.startsWith('='))\n    return unparsedValue\n  parser.setHot(hot)\n  const parsedResult = parser.parse(unparsedValue.substring(1))\n  return (parsedResult.error) ? parsedResult.error : parsedResult.result\n}\n\nconst renderer = function(hot, td, row, col, prop, unparsedValue, cellProperties) {\n  const value = getValue(hot, unparsedValue)\n  if (Number.isInteger(value)) {\n    Handsontable.renderers.NumericRenderer(hot, td, row, col, prop, value, cellProperties)\n    return\n  }\n  if (typeof value === 'boolean') {\n    Handsontable.renderers.TextRenderer(hot, td, row, col, prop, value, cellProperties)\n    return\n  }\n  if (!looksLikeDna(value)) {\n    Handsontable.renderers.TextRenderer(hot, td, row, col, prop, value, cellProperties)\n    return\n  }\n\n  const div = toColorText(value)\n  td.style.fontFamily = 'monospace';\n  // const div = toStripes(value)\n  Handsontable.renderers.TextRenderer.apply(this, arguments);\n  td.removeChild(td.childNodes[0]);\n  td.appendChild(div)\n};\n\nconst editor = Handsontable.editors.TextEditor\n\nexport default {\n  renderer, //: Handsontable.renderers.TextRenderer,\n  validator: Handsontable.validators.TextValidator,\n  editor\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'handsontable/dist/handsontable.full.css';\nimport LocusTable from './LocusTable'\nimport dnaType from './cellTypes/dnaType'\nimport Handsontable from 'handsontable'\nconst { times } = require('ramda')\nconst { randomSequence } = require('./functions')\n\nHandsontable.cellTypes.registerCellType('locus-acgt-dna-sequence', dnaType)\nHandsontable.validators.registerValidator('locus-acgt-dna-sequence', dnaType.validator)\n// Handsontable.hooks.add('afterRender', () => console.log('afterRender', arguments[0].hot))\n// console.log(`Handsontable.hooks:`, Handsontable.hooks)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: times( () => times (() => randomSequence(25), 5), 5),\n      settings: {\n        displayText: false,\n        width: 1200,\n        height: 220\n      }\n    }\n  }\n\n  handleChange = (setting, states) => {\n    // console.log(`this.refs:`, this.refs)\n    // console.log(`this.state.data:`, this.state.data)\n    return event => {\n      this.setState({\n        // data: {this.state.data},\n        settings: {\n          [setting]: states[event.target.checked ? 1 : 0],\n        }\n      });\n      // console.log(`this.state:`, this.state)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <span className=\"App-title\">Locus&nbsp;</span>\n            <span className=\"App-title adenine\">A</span>\n            <span className=\"App-title\">&ndash;</span>\n            <span className=\"App-title cytosine\">C</span>\n            <span className=\"App-title\">&ndash;</span>\n            <span className=\"App-title guanine\">G</span>\n            <span className=\"App-title\">&ndash;</span>\n            <span className=\"App-title thymine\">T&nbsp;</span>\n            <span className=\"App-subtitle\">a spreadsheet for sequences</span>\n        </header>\n        <LocusTable\n          data = {this.state.data}\n          name = \"hot\"\n          id = \"hot-id\"\n          ref = \"hot-ref\"\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","const { times } = require('ramda')\n\nconst amplicon = (sequence, start, end) => {\n  const a = sequence.indexOf(start)\n  if (a < 0) return ''\n  const b = sequence.indexOf(end, a)\n  if (b < 0) return ''\n  return sequence.substring(a, b + end.length)\n}\n\n// https://droog.gs.washington.edu/parc/images/iupac.html\nconst iupacAmbiguity = {\n  a: 'a',\n  c: 'c',\n  g: 'g',\n  t: 't',\n  r: '[ag]',\n  y: '[ct]',\n  s: '[gc]',\n  w: '[at]',\n  k: '[gt]',\n  m: '[ac]',\n  b: '[cgt]',\n  d: '[agt]',\n  h: '[act]',\n  v: '[acg]',\n  n: '[acgt]',\n}\nconst iupacAmbiguityLookup = {\n  a: 'a',\n  c: 'c',\n  g: 'g',\n  t: 't',\n  ag: 'r',\n  ct: 'y',\n  cg: 's',\n  at: 'w',\n  gt: 'k',\n  ac: 'm',\n  cgt: 'b',\n  agt: 'd',\n  act: 'h',\n  acg: 'v',\n  acgt: 'n',\n}\n\nconst looksLikeDna = s => {\n  return s.toLowerCase().replace(/[acgtryswkmbdhvn]/g, '') === ''\n}\n\nconst iupacRegex = s => {\n  const pattern = s\n  .toLowerCase()\n  .split('')\n  .reduce((a, c) => a += iupacAmbiguity[c], '')\n  return new RegExp(pattern, \"g\")\n}\n\nconst find = (sequence, subsequence) => {\n  const re = iupacRegex(subsequence)\n  return sequence.toLowerCase().search(re)\n}\n\nconst count = (sequence, subsequence) => {\n  const re = iupacRegex(subsequence)\n  return ((sequence.toLowerCase() || '').match(re) || []).length\n}\n\nconst bases = 'acgt'.split('')\nconst randomBase = () => bases[Math.floor(4 * Math.random())]\nconst randomSequence = n => times(randomBase, n).join('')\n\nconst consensusBase = (sequences, index) => {\n  const set = new Set()\n  sequences.forEach(s => set.add(s.charAt(index)))\n  const v = Array.from(set)\n  v.sort()\n  return iupacAmbiguityLookup[v.join('')]\n}\n\nconst consensus = sequences => {\n  let n = sequences[0].length\n  for (let i = 1; i < sequences.length; i++)\n    n = Math.min(n, sequences[i].length)\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += consensusBase(sequences, i)\n  }\n  return result\n}\n\nconst allSame = (sequences, index) => {\n  switch(consensusBase(sequences, index)) {\n    case 'a':\n    case 'c':\n    case 'g':\n    case 't':\n      return true\n    default:\n      return false\n  }\n}\n\nconst firstDifference = sequences => {\n  let n = sequences[0].length\n  for (let i = 0; i < n; i++) {\n    if (!allSame(sequences, i)) return i\n  }\n  return -1\n}\n\nmodule.exports = {\n  amplicon,\n  find,\n  count,\n  randomSequence,\n  consensus,\n  firstDifference,\n  looksLikeDna\n}\n"],"sourceRoot":""}